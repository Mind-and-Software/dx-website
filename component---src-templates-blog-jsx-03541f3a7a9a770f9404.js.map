{"version":3,"sources":["webpack://dx-website/./src/components/ImageLink.jsx","webpack://dx-website/./src/components/ProfilePicture.jsx","webpack://dx-website/./src/styles/profilePicture.module.scss","webpack://dx-website/./src/components/ArticlePreview.jsx","webpack://dx-website/./src/styles/articlePreview.module.scss","webpack://dx-website/./src/components/Image.jsx","webpack://dx-website/./src/styles/tag.module.scss","webpack://dx-website/./src/components/Tag.jsx","webpack://dx-website/./src/components/Blurb.jsx","webpack://dx-website/./src/styles/blurb.module.scss","webpack://dx-website/./src/components/RelatedContent.jsx","webpack://dx-website/./src/styles/relatedContent.module.scss","webpack://dx-website/./src/styles/article.module.scss","webpack://dx-website/./src/templates/blog.jsx"],"names":["ImageLink","to","imageData","alt","Link","aria-label","Image","defaultProps","ProfilePicture","url","data-testid","className","AuthorSection","name","credentials","image","node","childImageSharp","gatsbyImageData","Dot","getDescriptionClassName","description","length","ArticlePreview","articleUrl","previewImage","imageAlt","tags","title","type","readingTime","date","authorName","authorCredentials","authorImage","authorUrl","map","tag","key","Tag","action","renderTags","renderReadingTime","getImage","G","children","useState","isActive","toggleActive","toggleTag","onClick","Blurb","contentList","role","edge","content","frontmatter","slug","fields","featuredImage","tagSeparator","Article","data","post","html","relatedContent","edges","author","blurb","dangerouslySetInnerHTML","__html"],"mappings":"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","file":"component---src-templates-blog-jsx-03541f3a7a9a770f9404.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport Image from './Image';\n\nconst ImageLink = ({ to, imageData, alt }) => (\n  <Link to={to} aria-label={`Preview picture of article: ${alt}`}>\n    <Image imageData={imageData} alt={alt} />\n  </Link>\n);\nImageLink.defaultProps = {\n  imageData: 'placeholder.png',\n};\n\nImageLink.propTypes = {\n  to: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  imageData: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n};\n\nexport default ImageLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport Image from './Image';\nimport { profilePicture } from '../styles/profilePicture.module.scss';\n\nconst ProfilePicture = ({ url, imageData }) => (\n  <Link\n    to={url}\n    aria-label=\"Picture of the author of this article\"\n    data-testid=\"profilepic\"\n  >\n    <Image\n      className={profilePicture}\n      imageData={imageData}\n      alt=\"Article preview profilepicture\"\n    />\n  </Link>\n);\n\nProfilePicture.defaultProps = {\n  url: '/',\n};\n\nProfilePicture.propTypes = {\n  url: PropTypes.string,\n  imageData: PropTypes.object.isRequired,\n};\n\nexport default ProfilePicture;\n","// extracted by mini-css-extract-plugin\nexport var profilePicture = \"profilePicture-module--profilePicture--3NqjX\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport ImageLink from './ImageLink';\nimport ProfilePicture from './ProfilePicture';\nimport Tag from './Tag';\n\nimport {\n  articlePreview,\n  rowSection,\n  authorSection,\n  infoSection,\n  imageLink,\n  dot,\n  descriptionEllipsis,\n  typeSection,\n} from '../styles/articlePreview.module.scss';\n\nexport const AuthorSection = ({ name, url, credentials, image }) => (\n  <div className={authorSection}>\n    {image && (\n      <ProfilePicture\n        url={url}\n        imageData={image.node.childImageSharp.gatsbyImageData}\n      />\n    )}\n    <Link to={url} aria-label={`Link to user profile: ${name}`}>\n      {credentials ? `${name},` : name}\n    </Link>\n    {credentials}\n  </div>\n);\n\nAuthorSection.propTypes = {\n  name: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  credentials: PropTypes.string.isRequired,\n};\n\nconst Dot = () => <span className={dot}>â€¢</span>;\n\nconst renderTags = (tags) => {\n  if (tags.length > 0) {\n    return tags.map((tag) => (\n      <div key={tag}>\n        <Tag type=\"link\" action={`tags/${tag}`}>\n          {tag}\n        </Tag>\n        <Dot />\n      </div>\n    ));\n  }\n  return '';\n};\n\nconst renderReadingTime = (readingTime) => {\n  if (readingTime) {\n    return (\n      <div aria-label=\"Reading time of the article\">{`${readingTime} read`}</div>\n    );\n  }\n  return '';\n};\n\nconst getDescriptionClassName = (description) => {\n  if (description.length > 100) {\n    return descriptionEllipsis;\n  }\n  return '';\n};\n\nconst ArticlePreview = ({\n  articleUrl,\n  previewImage,\n  imageAlt,\n  tags,\n  title,\n  type,\n  readingTime,\n  date,\n  description,\n  authorName,\n  authorCredentials,\n  authorImage,\n  authorUrl,\n}) => (\n  <div className={articlePreview} aria-label=\"Article preview\">\n    {previewImage && (\n      <div className={imageLink}>\n        <ImageLink to={articleUrl} imageData={previewImage} alt={imageAlt} />\n      </div>\n    )}\n    <div className={infoSection}>\n      <div className={rowSection}>\n        {renderTags(tags)}\n        {renderReadingTime(readingTime)}\n        {readingTime && date && <Dot />}\n        {date}\n      </div>\n      <div>\n        <Link to={articleUrl}>\n          <h3>{title}</h3>\n        </Link>\n        <div className={getDescriptionClassName(description)}>\n          {description}\n        </div>\n        {type && <div className={typeSection}>{type}</div>}\n        {authorName && (\n          <AuthorSection\n            name={authorName}\n            credentials={authorCredentials}\n            url={authorUrl}\n            image={authorImage}\n          />\n        )}\n      </div>\n    </div>\n  </div>\n);\n\nArticlePreview.defaultProps = {\n  previewImage: '',\n  imageAlt: '',\n  tags: [],\n  type: '',\n  readingTime: '',\n  date: '',\n  description: '',\n  authorName: '',\n  authorUrl: '/',\n  authorImage: '',\n  authorCredentials: '',\n};\n\nArticlePreview.propTypes = {\n  articleUrl: PropTypes.string.isRequired,\n  previewImage: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  imageAlt: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  readingTime: PropTypes.string,\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),\n  description: PropTypes.node,\n  authorName: PropTypes.string,\n  authorUrl: PropTypes.string,\n  authorImage: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  authorCredentials: PropTypes.string,\n};\n\nexport default ArticlePreview;\n","// extracted by mini-css-extract-plugin\nexport var articlePreview = \"articlePreview-module--article-preview--2fbNF\";\nexport var infoSection = \"articlePreview-module--info-section--19eNQ\";\nexport var rowSection = \"articlePreview-module--row-section--2xRiF\";\nexport var authorSection = \"articlePreview-module--author-section--uPydT\";\nexport var imageLink = \"articlePreview-module--image-link--18clN\";\nexport var dot = \"articlePreview-module--dot--2KcIv\";\nexport var descriptionEllipsis = \"articlePreview-module--description-ellipsis--PfsCz\";\nexport var typeSection = \"articlePreview-module--typeSection--2CDzW\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\n\nconst Image = ({ className, imageData, alt }) => {\n  const image = getImage(imageData);\n  return <GatsbyImage className={className} image={image} alt={alt} />;\n};\n\nImage.defaultProps = {\n  imageData: 'placeholder.png',\n  className: '',\n};\n\nImage.propTypes = {\n  alt: PropTypes.string.isRequired,\n  imageData: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  className: PropTypes.string,\n};\n\nexport default Image;\n","// extracted by mini-css-extract-plugin\nexport var toggleTag = \"tag-module--toggleTag--24ulh\";\nexport var toggleTagActive = \"tag-module--toggleTag--active--267PV\";\nexport var tag = \"tag-module--tag--2TGyQ\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\n\nimport { tag, toggleTag, toggleTagActive } from '../styles/tag.module.scss';\n\nconst Tag = ({ children, type, action }) => {\n  const [isActive, toggleActive] = useState(false);\n\n  const toggle = () => toggleActive(!isActive);\n\n  if (type === 'link') {\n    return (\n      <Link to={action} className={tag} aria-label={`Goto ${children}`}>\n        {children}\n      </Link>\n    );\n  }\n  if (type === 'toggle') {\n    return (\n      <button\n        type=\"button\"\n        className={`${toggleTag} ${isActive ? toggleTagActive : ''} `}\n        onClick={() => toggle()}\n        aria-label={`Toggle ${isActive ? 'off' : 'on'} filter for ${children} `}\n      >\n        {children}\n      </button>\n    );\n  }\n  return <span className={tag}>{children}</span>;\n};\n\nTag.defaultProps = {\n  action: '',\n  type: '',\n};\n\nTag.propTypes = {\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  children: PropTypes.string.isRequired,\n  type: PropTypes.string,\n};\n\nexport default Tag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { blurb } from '../styles/blurb.module.scss';\n\nconst Blurb = ({ children }) => {\n  const isEmpty = children === '' || children == null;\n\n  return isEmpty ? (\n    ''\n  ) : (\n    <aside className={blurb} aria-label=\"Text Blurb\">\n      {children}\n    </aside>\n  );\n};\n\nBlurb.defaultProps = {\n  children: '',\n};\n\nBlurb.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Blurb;\n","// extracted by mini-css-extract-plugin\nexport var blurb = \"blurb-module--blurb--3aElL\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ArticlePreview from './ArticlePreview';\n\nimport {\n  contentItem,\n  contentPreviews,\n  relatedContent,\n} from '../styles/relatedContent.module.scss';\n\nconst RelatedContent = ({ contentList }) => {\n  return (\n    <aside className={relatedContent} role=\"complementary\">\n      <h2>Related content</h2>\n      <ul className={contentPreviews}>\n        {contentList &&\n          contentList.map((edge) => {\n            const content = edge.node.frontmatter;\n            const slug = edge.node.fields.slug;\n            return (\n              <li className={contentItem} key={content.title}>\n                <ArticlePreview\n                  articleUrl={slug}\n                  type={content.type}\n                  imageAlt={content.imageAlt}\n                  previewImage={content.featuredImage}\n                  title={content.title}\n                />\n              </li>\n            );\n          })}\n      </ul>\n    </aside>\n  );\n};\n\nRelatedContent.propTypes = {\n  contentList: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default RelatedContent;\n","// extracted by mini-css-extract-plugin\nexport var contentItem = \"relatedContent-module--content-item--3AerO\";\nexport var contentPreviews = \"relatedContent-module--content-previews--2gaWp\";\nexport var relatedContent = \"relatedContent-module--related-content--Q7RDW\";","// extracted by mini-css-extract-plugin\nexport var article = \"article-module--article--2eyuf\";\nexport var articleContent = \"article-module--article-content--1lJlH\";\nexport var articleImage = \"article-module--article-image--3a7a_\";\nexport var meta = \"article-module--meta--t5UbQ\";\nexport var tagSeparator = \"article-module--tagSeparator--1siAD\";","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Blurb from '../components/Blurb';\nimport Image from '../components/Image';\nimport Layout from '../components/layout';\nimport RelatedContent from '../components/RelatedContent';\nimport Tag from '../components/Tag';\n\nimport {\n  article,\n  articleContent,\n  articleImage,\n  meta,\n  tagSeparator,\n} from '../styles/article.module.scss';\n\nexport default function Article({ data }) {\n  const { frontmatter, html } = data.post;\n  const relatedContent = data.relatedContent.edges;\n\n  return (\n    <Layout>\n      <article className={article}>\n        <div aria-label=\"Article info\" className={meta}>\n          <span aria-label=\"Tags\">\n            {frontmatter.tags &&\n              frontmatter.tags.map((tag) => (\n                <span key={tag}>\n                  <Tag type=\"link\" action={`/tags/${tag}`}>\n                    {tag}\n                  </Tag>\n                  <span className={tagSeparator}>â€¢</span>\n                </span>\n              ))}\n          </span>\n          {frontmatter.readingTime && (\n            <span>\n              {`${frontmatter.readingTime} min read`}\n              <span className={tagSeparator}>â€¢</span>\n            </span>\n          )}\n          <span>{frontmatter.date}</span>\n        </div>\n        <h1>{frontmatter.title}</h1>\n        <p aria-label=\"author\">{frontmatter.author}</p>\n        <Image\n          className={articleImage}\n          imageData={frontmatter.featuredImage}\n          alt={frontmatter.imageAlt}\n        />\n        <Blurb>{frontmatter.blurb}</Blurb>\n        <div\n          className={articleContent}\n          // eslint-disable-next-line react/no-danger\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n      </article>\n      <RelatedContent contentList={relatedContent} />\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query ($slug: String!, $tags: [String!]) {\n    post: markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        date(formatString: \"DD MMMM, YYYY\")\n        slug\n        title\n        author\n        blurb\n        tags\n        readingTime\n        featuredImage {\n          childImageSharp {\n            gatsbyImageData(width: 800)\n          }\n        }\n        imageAlt\n      }\n    }\n    relatedContent: allMarkdownRemark(\n      filter: { frontmatter: { tags: { in: $tags } } }\n      limit: 3\n      sort: { fields: frontmatter___date, order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            featuredImage {\n              childImageSharp {\n                gatsbyImageData(width: 200, height: 120)\n              }\n            }\n            imageAlt\n            type\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}